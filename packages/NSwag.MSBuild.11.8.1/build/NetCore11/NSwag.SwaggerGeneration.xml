<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NSwag.SwaggerGeneration</name>
    </assembly>
    <members>
        <member name="T:NSwag.SwaggerGeneration.AssemblySettings">
            <summary>Settings for loading assemblies.</summary>
        </member>
        <member name="M:NSwag.SwaggerGeneration.AssemblySettings.#ctor">
            <summary>Initializes a new instance of the <see cref="T:NSwag.SwaggerGeneration.AssemblySettings"/> class.</summary>
        </member>
        <member name="P:NSwag.SwaggerGeneration.AssemblySettings.AssemblyPaths">
            <summary>Gets or sets the Web API assembly paths.</summary>
        </member>
        <member name="P:NSwag.SwaggerGeneration.AssemblySettings.AssemblyConfig">
            <summary>Gets or sets the path to the assembly App.config or Web.config (optional).</summary>
        </member>
        <member name="P:NSwag.SwaggerGeneration.AssemblySettings.ReferencePaths">
            <summary>Gets ot sets the paths where to search for referenced assemblies</summary>
        </member>
        <member name="T:NSwag.SwaggerGeneration.IAssemblySettings">
            <summary>An interface describing a settings class with assembly loader settings.</summary>
        </member>
        <member name="P:NSwag.SwaggerGeneration.IAssemblySettings.AssemblySettings">
            <summary>Gets or sets the Web API assembly paths.</summary>
        </member>
        <member name="T:NSwag.SwaggerGeneration.Processors.Contexts.DocumentProcessorContext">
            <summary>The <see cref="T:NSwag.SwaggerGeneration.Processors.IDocumentProcessor"/> context.</summary>
        </member>
        <member name="M:NSwag.SwaggerGeneration.Processors.Contexts.DocumentProcessorContext.#ctor(NSwag.SwaggerDocument,System.Collections.Generic.IEnumerable{System.Type},NJsonSchema.JsonSchemaResolver,NJsonSchema.Generation.JsonSchemaGenerator)">
            <summary>Initializes a new instance of the <see cref="T:NSwag.SwaggerGeneration.Processors.Contexts.DocumentProcessorContext" /> class.</summary>
            <param name="document">The document.</param>
            <param name="controllerTypes">The controller types.</param>
            <param name="schemaResolver">The schema resolver.</param>
            <param name="schemaGenerator">The schema generator.</param>
        </member>
        <member name="P:NSwag.SwaggerGeneration.Processors.Contexts.DocumentProcessorContext.Document">
            <summary>Gets the Swagger document.</summary>
        </member>
        <member name="P:NSwag.SwaggerGeneration.Processors.Contexts.DocumentProcessorContext.ControllerTypes">
            <summary>Gets the controller types.</summary>
        </member>
        <member name="P:NSwag.SwaggerGeneration.Processors.Contexts.DocumentProcessorContext.SchemaResolver">
            <summary>Gets or sets the schema resolver.</summary>
        </member>
        <member name="P:NSwag.SwaggerGeneration.Processors.Contexts.DocumentProcessorContext.SchemaGenerator">
            <summary>Gets or sets the schema generator (call Generate() with JsonSchemaResolver property!).</summary>
        </member>
        <member name="T:NSwag.SwaggerGeneration.Processors.Contexts.OperationProcessorContext">
            <summary>The <see cref="T:NSwag.SwaggerGeneration.Processors.IOperationProcessor"/> context.</summary>
        </member>
        <member name="M:NSwag.SwaggerGeneration.Processors.Contexts.OperationProcessorContext.#ctor(NSwag.SwaggerDocument,NSwag.SwaggerOperationDescription,System.Type,System.Reflection.MethodInfo,NSwag.SwaggerGeneration.SwaggerGenerator,NJsonSchema.Generation.JsonSchemaGenerator,NJsonSchema.JsonSchemaResolver,System.Collections.Generic.IList{NSwag.SwaggerOperationDescription})">
            <summary>Initializes a new instance of the <see cref="T:NSwag.SwaggerGeneration.Processors.Contexts.OperationProcessorContext" /> class.</summary>
            <param name="document">The document.</param>
            <param name="operationDescription">The operation description.</param>
            <param name="controllerType">Type of the controller.</param>
            <param name="methodInfo">The method information.</param>
            <param name="swaggerGenerator">The swagger generator.</param>
            <param name="schemaResolver">The schema resolver.</param>
            <param name="allOperationDescriptions">All operation descriptions.</param>
            <param name="schemaGenerator">The schema generator.</param>
        </member>
        <member name="P:NSwag.SwaggerGeneration.Processors.Contexts.OperationProcessorContext.Document">
            <summary>Gets the Swagger document.</summary>
        </member>
        <member name="P:NSwag.SwaggerGeneration.Processors.Contexts.OperationProcessorContext.OperationDescription">
            <summary>Gets or sets the operation description.</summary>
        </member>
        <member name="P:NSwag.SwaggerGeneration.Processors.Contexts.OperationProcessorContext.ControllerType">
            <summary>Gets the type of the controller.</summary>
            <value>The type of the controller.</value>
        </member>
        <member name="P:NSwag.SwaggerGeneration.Processors.Contexts.OperationProcessorContext.MethodInfo">
            <summary>Gets or sets the method information.</summary>
        </member>
        <member name="P:NSwag.SwaggerGeneration.Processors.Contexts.OperationProcessorContext.SwaggerGenerator">
            <summary>Gets or sets the Swagger generator.</summary>
        </member>
        <member name="P:NSwag.SwaggerGeneration.Processors.Contexts.OperationProcessorContext.SchemaResolver">
            <summary>Gets the schema resolver.</summary>
        </member>
        <member name="P:NSwag.SwaggerGeneration.Processors.Contexts.OperationProcessorContext.SchemaGenerator">
            <summary>Gets the schema generator.</summary>
        </member>
        <member name="P:NSwag.SwaggerGeneration.Processors.Contexts.OperationProcessorContext.AllOperationDescriptions">
            <summary>Gets or sets all operation descriptions.</summary>
        </member>
        <member name="T:NSwag.SwaggerGeneration.Processors.IDocumentProcessor">
            <summary>Post processes a generated <see cref="T:NSwag.SwaggerDocument"/>.</summary>
        </member>
        <member name="M:NSwag.SwaggerGeneration.Processors.IDocumentProcessor.ProcessAsync(NSwag.SwaggerGeneration.Processors.Contexts.DocumentProcessorContext)">
            <summary>Processes the specified Swagger document.</summary>
            <param name="context">The processor context.</param>
        </member>
        <member name="T:NSwag.SwaggerGeneration.Processors.IOperationProcessor">
            <summary>Post processes a generated <see cref="T:NSwag.SwaggerOperation"/>.</summary>
        </member>
        <member name="M:NSwag.SwaggerGeneration.Processors.IOperationProcessor.ProcessAsync(NSwag.SwaggerGeneration.Processors.Contexts.OperationProcessorContext)">
            <summary>Processes the specified method information.</summary>
            <param name="context">The processor context.</param>
            <returns>true if the operation should be added to the Swagger specification.</returns>
        </member>
        <member name="T:NSwag.SwaggerGeneration.SwaggerGenerator">
            <summary>Provides services to for Swagger generators like the creation of parameters and handling of schemas.</summary>
        </member>
        <member name="M:NSwag.SwaggerGeneration.SwaggerGenerator.#ctor(NJsonSchema.Generation.JsonSchemaGenerator,NJsonSchema.Generation.JsonSchemaGeneratorSettings,NJsonSchema.JsonSchemaResolver)">
            <summary>Initializes a new instance of the <see cref="T:NSwag.SwaggerGeneration.SwaggerGenerator"/> class.</summary>
            <param name="schemaGenerator">The schema generator.</param>
            <param name="schemaGeneratorSettings">The schema generator settings.</param>
            <param name="schemaResolver">The schema resolver.</param>
        </member>
        <member name="M:NSwag.SwaggerGeneration.SwaggerGenerator.CreateUntypedPathParameter(System.String,System.String)">
            <summary>Creates a path parameter for a given type.</summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterType">Type of the parameter.</param>
            <returns>The parameter.</returns>
        </member>
        <member name="M:NSwag.SwaggerGeneration.SwaggerGenerator.CreatePrimitiveParameterAsync(System.String,System.Reflection.ParameterInfo)">
            <summary>Creates a primitive parameter for the given parameter information reflection object.</summary>
            <param name="name">The name.</param>
            <param name="parameter">The parameter information.</param>
            <returns>The parameter.</returns>
        </member>
        <member name="M:NSwag.SwaggerGeneration.SwaggerGenerator.CreatePrimitiveParameterAsync(System.String,System.String,System.Type,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>Creates a primitive parameter for the given parameter information reflection object.</summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="parameterType">Type of the parameter.</param>
            <param name="parentAttributes">The parent attributes.</param>
            <returns>The parameter.</returns>
        </member>
        <member name="M:NSwag.SwaggerGeneration.SwaggerGenerator.CreateBodyParameterAsync(System.String,System.Reflection.ParameterInfo)">
            <summary>Creates a primitive parameter for the given parameter information reflection object.</summary>
            <param name="name">The name.</param>
            <param name="parameter">The parameter.</param>
            <returns>The parameter.</returns>
        </member>
        <member name="T:NSwag.SwaggerGeneration.SwaggerJsonSchemaGenerator">
            <summary>A <see cref="T:NJsonSchema.Generation.JsonSchemaGenerator"/> which only generate the schema for the root type. 
            Referenced types are added to the service's Definitions collection. </summary>
        </member>
        <member name="M:NSwag.SwaggerGeneration.SwaggerJsonSchemaGenerator.#ctor(NJsonSchema.Generation.JsonSchemaGeneratorSettings)">
            <summary>Initializes a new instance of the <see cref="T:NSwag.SwaggerGeneration.SwaggerJsonSchemaGenerator" /> class.</summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:NSwag.SwaggerGeneration.SwaggerJsonSchemaGenerator.GenerateObjectAsync``1(System.Type,``0,NJsonSchema.JsonSchemaResolver)">
            <summary>Generates the properties for the given type and schema.</summary>
            <typeparam name="TSchemaType">The type of the schema type.</typeparam>
            <param name="type">The types.</param>
            <param name="schema">The properties</param>
            <param name="schemaResolver">The schema resolver.</param>
            <returns></returns>
        </member>
        <member name="M:NSwag.SwaggerGeneration.SwaggerJsonSchemaGenerator.GenerateWithReferenceAndNullability``1(System.Type,System.Collections.Generic.IEnumerable{System.Attribute},System.Boolean,NJsonSchema.JsonSchemaResolver,System.Func{``0,NJsonSchema.JsonSchema4,System.Threading.Tasks.Task})">
            <summary>Generetes a schema directly or referenced for the requested schema type; also adds nullability if required.</summary>
            <typeparam name="TSchemaType">The resulted schema type which may reference the actual schema.</typeparam>
            <param name="type">The type of the schema to generate.</param>
            <param name="parentAttributes">The parent attributes (e.g. property or paramter attributes).</param>
            <param name="isNullable">Specifies whether the property, parameter or requested schema type is nullable.</param>
            <param name="schemaResolver">The schema resolver.</param>
            <param name="transformation">An action to transform the resulting schema (e.g. property or parameter) before the type of reference is determined (with $ref or allOf/oneOf).</param>
            <returns>The requested schema object.</returns>
        </member>
    </members>
</doc>
